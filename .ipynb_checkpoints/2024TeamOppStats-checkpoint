{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "884c6ac1-05f9-4e28-ae0b-4cf483c0eeaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup, Comment\n",
    "import pandas as pd\n",
    "\n",
    "import requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "24c26e11-2cab-42a6-bf16-7aee6e2a187c",
   "metadata": {},
   "outputs": [],
   "source": [
    "url1 = 'https://www.basketball-reference.com/teams/BOS/2024.html'\n",
    "url2 = 'https://www.basketball-reference.com/teams/GSW/2024.html'\n",
    "page = requests.get(url2)\n",
    "\n",
    "soup = BeautifulSoup(page.text, 'html')\n",
    "\n",
    "# print(soup)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "7007a75c-f4f9-4372-9ed8-256a4f0d3ef8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parsing Commented Out Portion\n",
    "div_tag = soup.find('div', id='all_team_and_opponent')\n",
    "\n",
    "comments = div_tag.find_all(string=lambda text: isinstance(text, Comment))\n",
    "\n",
    "for comment in comments:\n",
    "    if 'div_team_and_opponent' in comment:\n",
    "        # Parse the commented content with BeautifulSoup\n",
    "        commented_soup = BeautifulSoup(comment, 'html.parser')\n",
    "        div_tag = commented_soup.find('div', id='div_team_and_opponent')\n",
    "        # Print or work with the tag\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "bce9a7aa-bb51-45ea-9135-bb720b2edc06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [Blank, G, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, FT, FTA, FT%, ORB, DRB, TRB, AST, STL, BLK, TOV, PF, PTS]\n",
      "Index: []\n",
      "\n",
      "[0 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "# Getting Stat Header Row and Turning into DF\n",
    "stats = div_tag.find_all('thead')\n",
    "th = stats[0].find_all('th')\n",
    "stats_row = [stat.text for stat in th]\n",
    "stats_row[0] = 'Blank' \n",
    "df = pd.DataFrame(columns = stats_row)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "66ef8a40-b90e-4375-9666-0c10594616ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Blank    G   MP   FG  FGA  FG%   3P  3PA  3P%   2P  ...  FT%  ORB  DRB  \\\n",
      "0       Team  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN   \n",
      "1     Team/G  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN   \n",
      "2    LG Rank  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN   \n",
      "3  Year/Year  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN   \n",
      "4       Team  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN   \n",
      "5     Team/G  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN   \n",
      "6    LG Rank  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN   \n",
      "7  Year/Year  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  ...  NaN  NaN  NaN   \n",
      "\n",
      "   TRB  AST  STL  BLK  TOV   PF  PTS  \n",
      "0  NaN  NaN  NaN  NaN  NaN  NaN  NaN  \n",
      "1  NaN  NaN  NaN  NaN  NaN  NaN  NaN  \n",
      "2  NaN  NaN  NaN  NaN  NaN  NaN  NaN  \n",
      "3  NaN  NaN  NaN  NaN  NaN  NaN  NaN  \n",
      "4  NaN  NaN  NaN  NaN  NaN  NaN  NaN  \n",
      "5  NaN  NaN  NaN  NaN  NaN  NaN  NaN  \n",
      "6  NaN  NaN  NaN  NaN  NaN  NaN  NaN  \n",
      "7  NaN  NaN  NaN  NaN  NaN  NaN  NaN  \n",
      "\n",
      "[8 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "first_column_entries = ['Team', 'Team/G', 'LG Rank', 'Year/Year', 'Team', 'Team/G', 'LG Rank', 'Year/Year']\n",
    "for i, value in enumerate(first_column_entries):\n",
    "    df.loc[i, 'Blank'] = value\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "edcecbdd-4281-420b-b14e-14d8f91cb963",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Blank   G     MP     FG    FGA    FG%      3P    3PA    3P%     2P  \\\n",
      "0       Team  82  19830   3582   7515   .477    1211   3191   .380   2371   \n",
      "1     Team/G      241.8   43.7   91.6   .477    14.8   38.9   .380   28.9   \n",
      "2    LG Rank          7      5      3     13       2      4      7     20   \n",
      "3  Year/Year       0.0%   1.2%   1.7%  -.002  -11.2%  -9.9%  -.006   9.0%   \n",
      "4       Team  82  19830   3453   7415   .466    1088   3030   .359   2365   \n",
      "5     Team/G      241.8   42.1   90.4   .466    13.3   37.0   .359   28.8   \n",
      "6    LG Rank          7     18     22      9      21     25     11     16   \n",
      "7  Year/Year       0.0%  -0.7%  -0.1%  -.003    2.6%   3.9%  -.005  -2.2%   \n",
      "\n",
      "   ...    FT%    ORB    DRB    TRB    AST    STL    BLK     TOV     PF    PTS  \n",
      "0  ...   .780    996   2834   3830   2402    572    377    1174   1598   9657  \n",
      "1  ...   .780   12.1   34.6   46.7   29.3    7.0    4.6    14.3   19.5  117.8  \n",
      "2  ...     17      5      4      1      4     23     23      23     22      8  \n",
      "3  ...  -.014  15.3%   1.5%   4.7%  -1.8%  -2.7%  16.7%  -12.1%  -9.0%  -1.0%  \n",
      "4  ...   .788    892   2627   3519   2187    633    407    1067   1471   9443  \n",
      "5  ...   .788   10.9   32.0   42.9   26.7    7.7    5.0    13.0   17.9  115.2  \n",
      "6  ...     18     18      8     12     16     20     15      23     24     18  \n",
      "7  ...  +.019   1.4%  -1.7%  -1.0%   3.6%  -2.0%  24.8%   -9.0%  -2.6%  -1.7%  \n",
      "\n",
      "[8 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "tbody = div_tag.find_all('tbody')\n",
    "tr = tbody[0].find_all('tr')\n",
    "\n",
    "for i in range(len(tr)):\n",
    "    td = tr[i].find_all('td')\n",
    "    row = [cell.text.strip() for cell in td]    \n",
    "    for j in range(len(row)):\n",
    "        df.loc[i, df.columns[j + 1]] = row[j]\n",
    "\n",
    "# Print the DataFrame\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6e82be7-ab92-4877-8ce4-5cfa5e60c3c0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
